<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicholas Ch&#39;s blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Nicholas Ch&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Aug 2025 17:07:19 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PicoCTF Web Medium Writeup</title>
      <link>http://localhost:1313/ctf-writeups/picoctf/picoctf-web-medium/</link>
      <pubDate>Sat, 09 Aug 2025 17:07:19 +0800</pubDate>
      <guid>http://localhost:1313/ctf-writeups/picoctf/picoctf-web-medium/</guid>
      <description>&lt;h1 id=&#34;ssti2&#34;&gt;SSTI2&lt;/h1&gt;&#xA;&lt;p&gt;I made a cool website where you can announce whatever you want! I read about input sanitization, so now I remove any kind of characters that could be a problem :) I heard templating is a cool and modular way to build web apps! Check out my website&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://shape-facility.picoctf.net:63568/&#34;&gt;http://shape-facility.picoctf.net:63568/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Website is vulnerable to SSTI&#xA;&lt;img src=&#34;4f353aa04b3d12bbc315a7900e2f82ec1cb08d1e.png&#34; alt=&#34;a&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Based on the server response header and templating evaluation, most probably a Python templating engine, Jinja2&#xA;&lt;img src=&#34;790e45b4b52ecadead56b655e917f5c68529db65.png&#34; alt=&#34;b&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PicoCTF Web Easy Writeup</title>
      <link>http://localhost:1313/ctf-writeups/picoctf/picoctf-web-easy/</link>
      <pubDate>Fri, 08 Aug 2025 17:07:19 +0800</pubDate>
      <guid>http://localhost:1313/ctf-writeups/picoctf/picoctf-web-easy/</guid>
      <description>&lt;h1 id=&#34;sst1&#34;&gt;SST1&lt;/h1&gt;&#xA;&lt;p&gt;I made a cool website where you can announce whatever you want! Try it out.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;a.png&#34; alt=&#34;a&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Response header suggests it is a Python web server. It can be either a Twig (PHP) or Jinja2 (Python) templating engine.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s go with Jinja first. We can perform SSTI by abusing the MRO function to display classes. The MRO will list the order in which the hierarchy of classes will be handled, we can take advantage of the fact that it lists the classes, to select the one we want. This will help us select the necessary gadgets and chain them to achieve our objective.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1121 Owasp Top 10</title>
      <link>http://localhost:1313/ctf-writeups/intigriti/1121-owasp-top-10/</link>
      <pubDate>Tue, 04 Feb 2025 17:07:19 +0800</pubDate>
      <guid>http://localhost:1313/ctf-writeups/intigriti/1121-owasp-top-10/</guid>
      <description>&lt;h1 id=&#34;challenge-description&#34;&gt;Challenge description&lt;/h1&gt;&#xA;&lt;p&gt;Execute JS on the page&#xA;&lt;a href=&#34;https://challenge-1121.intigriti.io/challenge/index.php?s=&#34;&gt;https://challenge-1121.intigriti.io/challenge/index.php?s=&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;html-injection&#34;&gt;HTML Injection&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;https://challenge-1121.intigriti.io/challenge/index.php?s=&amp;lt;h1&amp;gt;sink&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Inspector tab to see the current state of the rendered DOM&#xA;&lt;img src=&#34;a.png&#34; alt=&#34;a&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;When we right click on lines containing &lt;code&gt;sink&lt;/code&gt; and Edit HTML, we HTML encoding being enforced&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;lt;&lt;/span&gt;h1&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;gt;&lt;/span&gt;sink&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;lt;&lt;/span&gt;/h1&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try to close the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; tag with &lt;code&gt;?s=&amp;lt;/title&amp;gt;&amp;lt;h1&amp;gt;sink&amp;lt;/h1&amp;gt;&lt;/code&gt;&#xA;&lt;img src=&#34;b.png&#34; alt=&#34;b&#34;&gt;&#xA;&lt;img src=&#34;c.png&#34; alt=&#34;c&#34;&gt;&#xA;Note that HTML encoding is applied to the &lt;code&gt;p&lt;/code&gt; tag context&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;You searched for &lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;lt;&lt;/span&gt;/title&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;h1&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;gt;&lt;/span&gt;sink&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;lt;&lt;/span&gt;/h1&lt;span style=&#34;color:#999;font-weight:bold&#34;&gt;&amp;amp;gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try to close the &lt;code&gt;p&lt;/code&gt; tag with &lt;code&gt;?s=&amp;lt;/p&amp;gt;&amp;lt;h1&amp;gt;sink&amp;lt;/h1&amp;gt;&lt;/code&gt; but there is no HTML injection as the tags are HTML encoded.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1021 Halloween Has Taken Over</title>
      <link>http://localhost:1313/ctf-writeups/intigriti/1021-halloween-has-taken-over/</link>
      <pubDate>Mon, 27 Jan 2025 17:07:19 +0800</pubDate>
      <guid>http://localhost:1313/ctf-writeups/intigriti/1021-halloween-has-taken-over/</guid>
      <description>&lt;h1 id=&#34;challenge-description&#34;&gt;Challenge description&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bugology.intigriti.io/intigriti-monthly-challenges/1021&#34;&gt;https://bugology.intigriti.io/intigriti-monthly-challenges/1021&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Find a way to execute arbitrary javascript on the challenge page&lt;/p&gt;&#xA;&lt;p&gt;The solution&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Should work on the latest version of Chrome and FireFox.&lt;/li&gt;&#xA;&lt;li&gt;Should execute &lt;code&gt;alert(document.domain)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Should leverage a cross site scripting vulnerability on this domain.&lt;/li&gt;&#xA;&lt;li&gt;Shouldn&amp;rsquo;t be self-XSS or related to MiTM attacks.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://challenge-1021.intigriti.io/challenge/challenge.php&#34;&gt;https://challenge-1021.intigriti.io/challenge/challenge.php&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;finding-html-injection&#34;&gt;Finding html injection&lt;/h1&gt;&#xA;&lt;p&gt;In the HTML source, there is a clue that the server accepts &lt;code&gt;html&lt;/code&gt; query parameter.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;light&amp;#34;&lt;/span&gt;&amp;gt;HALLOWEEN HAS TAKEN OVER!&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ARE YOU SCARED?&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;ARE YOU STILL SANE?&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;NOBODY CAN BREAK THIS!&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;NOBODY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CAN SAVE INTIGRITI&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;I USE ?html= TO CONVEY THESE MESSAGES&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;I&amp;#39;LL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  RELEASE INTIGRITI FROM MY WRATH... &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;... AFTER YOU POP AN XSS&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;ELSE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  INTIGRITI IS MINE!&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt; /&amp;gt;SIGNED* 1337Witch69&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Evaluating HTML injection sink:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compile-time Security Controls: Bridging the Gap Beyond SAST</title>
      <link>http://localhost:1313/posts/compile-time-security-control/</link>
      <pubDate>Thu, 11 Jul 2024 15:56:35 +0800</pubDate>
      <guid>http://localhost:1313/posts/compile-time-security-control/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;em&gt;I am not a compiler expert. This article&amp;rsquo;s goal is to express the possibility of how we can look at compile-time security controls for Application Security.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-is-sast&#34;&gt;What is SAST?&lt;/h1&gt;&#xA;&lt;p&gt;Static Application Security Testing (SAST) involves the scanning of static application code before it is compiled. The scan usually involves a parser to check for security vulnerabilities before the code is compiled.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-limitations-of-sast&#34;&gt;The limitations of SAST&lt;/h1&gt;&#xA;&lt;p&gt;SAST scanners will look for known or configured insecure coding patterns by parsing source files. Parsing source files typically involves building an abstract syntax tree (AST) data structure, where each node represents a specific token and its relationship with other tokens. However, the limitation of SAST scanners is the lack of richer semantics of each token.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Offensive Security Web Expert (OSWE) Review</title>
      <link>http://localhost:1313/posts/oswe-review/</link>
      <pubDate>Fri, 12 May 2023 17:07:19 +0800</pubDate>
      <guid>http://localhost:1313/posts/oswe-review/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;oswe-logo.png&#34; alt=&#34;oswe&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;precursor-to-the-coursework&#34;&gt;Precursor to the coursework&lt;/h1&gt;&#xA;&lt;p&gt;I started the OSWE coursework around the middle of 2022. Before that, I had done the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PortSwigger labs - SQLi, XSS, XXE, File upload vulnerabilities, Path traversal, Command Injection, Server-side template injection&lt;/li&gt;&#xA;&lt;li&gt;Pentesterlab Pro - Essential badge, couple of Code review labs&lt;/li&gt;&#xA;&lt;li&gt;Cleared the eLearnsecurity Professional Penetration Tester (eCPPTv2) certification&lt;/li&gt;&#xA;&lt;li&gt;Constantly reading up disclosed bug bounty reports&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I also had done many different programming projects in Java, C/C++, Python, PHP, Javascript, SQL. It’s definitely beneficial to have a background in software development and having worked with different programming languages. Even if you don’t have such a background, achieving the OSWE is still possible because it mainly requires you to understand application logic flow in a language agnostic fashion.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
